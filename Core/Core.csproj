<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net5.0</TargetFramework>
    <AssemblyName>BonusBot.Core</AssemblyName>
    <RootNamespace>BonusBot.Core</RootNamespace>
    <Nullable>enable</Nullable>
    <StartupObject>Core.Startup</StartupObject>
    <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
    <DockerfileContext>.</DockerfileContext>
    <DockerfileFile>..\dockerfile</DockerfileFile>
    <WebDashboardSpaRoot>..\Modules\WebDashboardModule\ClientApp\</WebDashboardSpaRoot>
    <DisableFastUpToDateCheck>true</DisableFastUpToDateCheck>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <PlatformTarget>AnyCPU</PlatformTarget>
    <DefineConstants>TRACE;TEST</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Discord.Net" Version="2.3.1" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="5.0.5">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" Version="5.0.1" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Common\Common.csproj" />
    <ProjectReference Include="..\Database\Database.csproj" />
    <ProjectReference Include="..\Modules\DateTimeTestModule\DateTimeTestModule.csproj" />
    <ProjectReference Include="..\Modules\SQLiteToPostgresModule\SqliteToPostgresModule.csproj" />
    <ProjectReference Include="..\Modules\WebDashboardModule\WebDashboardModule.csproj" />
    <ProjectReference Include="..\Systems\GuildsSystem\GuildsSystem.csproj" />
    <ProjectReference Include="..\Modules\AdminModule\AdminModule.csproj" />
    <ProjectReference Condition="'$(ISDOCKER)' == 'true' OR $(DefineConstants.Contains('TEST'))" Include="..\Modules\AudioModule\AudioModule.csproj" />
    <ProjectReference Include="..\Modules\ColorRolesModule\ColorRolesModule.csproj" />
    <ProjectReference Include="..\Modules\GamePlaningModule\GamePlaningModule.csproj" />
    <ProjectReference Include="..\Modules\GuildSettingsModule\GuildSettingsModule.csproj" />
    <ProjectReference Include="..\Modules\LoggingModule\LoggingModule.csproj" />
    <ProjectReference Include="..\Modules\ModulesControllingModule\ModulesControllingModule.csproj" />
    <ProjectReference Condition="'$(ISDOCKER)' == 'true' OR $(DefineConstants.Contains('TEST'))" Include="..\Modules\TDSConnectorClientModule\TDSConnectorClientModule.csproj" />
    <ProjectReference Condition="'$(ISDOCKER)' == 'true' OR $(DefineConstants.Contains('TEST'))" Include="..\Modules\TDSConnectorServerModule\TDSConnectorServerModule.csproj" />
    <ProjectReference Include="..\Services\Services.csproj" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(WebDashboardSpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />
    <Exec WorkingDirectory="$(WebDashboardSpaRoot)" Command="npm install" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec WorkingDirectory="$(WebDashboardSpaRoot)" Command="npm install" />
    <Exec WorkingDirectory="$(WebDashboardSpaRoot)" Command="npm run build -- --prod" />
    <Exec WorkingDirectory="$(WebDashboardSpaRoot)" Command="npm run build:ssr -- --prod" Condition=" '$(BuildServerSideRenderer)' == 'true' " />
    
    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(WebDashboardSpaRoot)dist\**" />
      <DistFiles Include="$(WebDashboardSpaRoot)dist-server\**" />
      <DistFiles Include="$(WebDashboardSpaRoot)node_modules\**" Condition="'$(BuildServerSideRenderer)' == 'true'" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)"> 
        <RelativePath>$([System.String]::Copy('%(DistFiles.Identity)').Replace('$(WebDashboardSpaRoot)', ''))</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        <ExcludeFromSingleFile>true</ExcludeFromSingleFile>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>
</Project>